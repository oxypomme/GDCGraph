{"version":3,"sources":["models/EMissionStatus.ts","features/commons/Navbar.tsx","views/home/index.tsx","models/EPlayerStatus.ts","features/players/Player.tsx","features/players/Players.tsx","features/players/index.tsx","views/players/index.tsx","views/errors/NotFound.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EMissionStatus","Nav","styled","nav","NavList","ul","NavItem","li","Navbar","id","exact","to","icon","faChartPie","faUsers","faGlobeEurope","Home","EPlayerStatus","Container","div","PlayerDetail","props","React","useState","player","setPlayer","useEffect","a","fetch","urljoin","urlAPI","json","getTotalPlayerStatus","status","missions","filter","m","player_status","length","getTotalMissionStatus","mission_status","infos","name","count_missions","data","alive","ALIVE","death","DEAD","push","angle","label","subLabel","toString","style","fill","strokeWidth","getDeathStats","showLabels","animation","width","height","toLocaleString","undefined","maximumFractionDigits","win","SUCCESS","loose","FAILED","getLooseStats","Player","Players","players","setPlayers","xType","barWidth","sort","b","slice","map","p","x","y","getTop3Stats","onSeriesMouseOver","ev","console","log","title","Search","form","PlayersView","useParams","parseInt","playerID","setPlayerID","playerName","setPlayerName","handleIdFetch","event","target","value","handleNameFetch","type","onChange","onBlur","NotFound","AppContainer","App","basename","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c6c9f29.chunk.js","sourcesContent":["enum EMissionStatus {\r\n    UNKNOWN = 0,\r\n    SUCCESS,\r\n    FAILED\r\n}\r\n\r\nexport default EMissionStatus;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChartPie, faGlobeEurope, faUsers } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Nav = styled.nav`\r\n    height: var(--nav-size);\r\n    width: 100%;\r\n    position: fixed;\r\n    float: left;\r\n    top: 0;\r\n    z-index: 9999;\r\n`;\r\n\r\nconst NavList = styled.ul`\r\n    height: 100%;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    background-color: var(--background-dark);\r\n`;\r\n\r\nconst NavItem = styled.li`\r\n    height: 100%;\r\n    float: left;\r\n\r\n    & > a {\r\n        display: inline-block;\r\n        color: var(--text);\r\n        text-align: center;\r\n        padding: 14px 16px;\r\n        text-decoration: none;\r\n        height: 100%;\r\n    }\r\n\r\n    & > a:hover {\r\n        background-color: var(--background-light);\r\n    }\r\n\r\n    & > a.active {\r\n        background-color: var(--accent1);\r\n    }\r\n\r\n    & svg {\r\n        margin-right: 5px;\r\n    }\r\n`;\r\n\r\nconst Navbar = (): JSX.Element => {\r\n    return (\r\n        <Nav id=\"navbar\">\r\n            <NavList>\r\n                <NavItem><NavLink exact to=\"/\"><FontAwesomeIcon icon={faChartPie} />GDC Graph</NavLink></NavItem>\r\n                <NavItem><NavLink to=\"/players\"><FontAwesomeIcon icon={faUsers} />Joueurs</NavLink></NavItem>\r\n                <NavItem><NavLink exact to=\"/missions\"><FontAwesomeIcon icon={faGlobeEurope} />Missions</NavLink></NavItem>\r\n            </NavList>\r\n        </Nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Home = (): JSX.Element => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","enum EPlayerStatus {\r\n    UNKNOWN = 0,\r\n    ALIVE,\r\n    DEAD\r\n}\r\nexport default EPlayerStatus;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport { RadialChart } from 'react-vis';\r\nimport urljoin from 'url-join';\r\n\r\nimport { url as urlAPI } from '../../config/gdcapi.json';\r\nimport EMissionStatus from '../../models/EMissionStatus';\r\nimport EPlayerStatus from '../../models/EPlayerStatus';\r\nimport MissionType from '../../models/MissionType';\r\nimport IPlayerType from '../../models/IPlayerType';\r\nimport IStatType from '../../models/IStatType';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-content: center;\r\n    justify-content: center;\r\n\r\n    & > * {\r\n        margin: 0 50px;\r\n    }\r\n`;\r\n\r\ntype PropsType = {\r\n    id: number\r\n}\r\n\r\ntype PlayerDetailType = {\r\n    infos: IPlayerType,\r\n    missions: Array<MissionType>\r\n}\r\n\r\ninterface IRadialStat extends IStatType {\r\n    angle: number,\r\n    label: string,\r\n    subLabel: string\r\n}\r\n\r\nconst PlayerDetail = (props: PropsType): JSX.Element => {\r\n    const { id } = props;\r\n    const [player, setPlayer] = React.useState<PlayerDetailType>();\r\n\r\n    React.useEffect((): void => {\r\n        (async () => {\r\n            setPlayer(await (await fetch(urljoin(urlAPI, `/players/${id}`))).json());\r\n        })();\r\n    }, [id]);\r\n\r\n    const getTotalPlayerStatus = (player: PlayerDetailType | undefined, status: EPlayerStatus): number => {\r\n        if (player) {\r\n            return player.missions.filter(m => m.player_status === status).length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const getTotalMissionStatus = (player: PlayerDetailType | undefined, status: EMissionStatus): number => {\r\n        if (player) {\r\n            return player.missions.filter(m => m.mission_status === status).length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const getTotalPlayerStatusWithMission = (player: PlayerDetailType | undefined, pStatus: EPlayerStatus, mStatus: EMissionStatus): number => {\r\n        if (player) {\r\n            return player.missions.filter(m => m.player_status === pStatus && m.mission_status === mStatus).length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const getDeathStats = (player: PlayerDetailType | undefined): IRadialStat[] => {\r\n        const data = [];\r\n        if (player) {\r\n            const alive = getTotalPlayerStatus(player, EPlayerStatus.ALIVE);\r\n            const death = getTotalPlayerStatus(player, EPlayerStatus.DEAD);\r\n            if (alive) {\r\n                data.push({\r\n                    angle: alive,\r\n                    label: \"En vie\",\r\n                    subLabel: alive.toString(),\r\n                    style: { fill: '#D9EDF7', strokeWidth: 0 }\r\n                });\r\n            }\r\n            if (death) {\r\n                data.push({\r\n                    angle: death,\r\n                    label: \"Mort\",\r\n                    subLabel: death.toString(),\r\n                    style: { fill: '#FCF8E3', strokeWidth: 0 }\r\n                });\r\n            }\r\n            if (alive + death !== player.infos.count_missions) {\r\n                data.push({\r\n                    angle: player.infos.count_missions - (alive + death),\r\n                    label: \"Inconnu\",\r\n                    subLabel: (player.infos.count_missions - (alive + death)).toString(),\r\n                    style: { fill: '#CCC', strokeWidth: 0 }\r\n                });\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    const getLooseStats = (player: PlayerDetailType | undefined): IRadialStat[] => {\r\n        const data = [];\r\n        if (player) {\r\n            const win = getTotalMissionStatus(player, EMissionStatus.SUCCESS);\r\n            const loose = getTotalMissionStatus(player, EMissionStatus.FAILED);\r\n            if (win) {\r\n                data.push({\r\n                    angle: win,\r\n                    label: \"Victoire\",\r\n                    subLabel: win.toString(),\r\n                    style: { fill: '#DFF0D8', strokeWidth: 0 }\r\n                });\r\n            }\r\n            if (loose) {\r\n                data.push({\r\n                    angle: loose,\r\n                    label: \"Echec\",\r\n                    subLabel: loose.toString(),\r\n                    style: { fill: '#F2DEDE', strokeWidth: 0 }\r\n                });\r\n            }\r\n            if (win + loose !== player.infos.count_missions) {\r\n                data.push({\r\n                    angle: player.infos.count_missions - (win + loose),\r\n                    label: \"Inconnu\",\r\n                    subLabel: (player.infos.count_missions - (win + loose)).toString(),\r\n                    style: { fill: '#FCF8E3', strokeWidth: 0 }\r\n                });\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{player?.infos.name}</h2>\r\n            <p>{player?.infos.count_missions} missions au compteur</p>\r\n            <Container>\r\n                <div>\r\n                    <h3>Mort ou vif ?</h3>\r\n                    <RadialChart\r\n                        data={getDeathStats(player)}\r\n                        showLabels={true}\r\n                        animation={true}\r\n                        width={300}\r\n                        height={300} />\r\n                    <p>\r\n                        Ratio : {(getTotalPlayerStatus(player, EPlayerStatus.ALIVE) / getTotalPlayerStatus(player, EPlayerStatus.DEAD))\r\n                            .toLocaleString(undefined, { maximumFractionDigits: 2 })}\r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    <h3>Victoire ?</h3>\r\n                    <RadialChart\r\n                        data={getLooseStats(player)}\r\n                        showLabels={true}\r\n                        animation={true}\r\n                        width={300}\r\n                        height={300} />\r\n                    <p>\r\n                        Ratio : {(getTotalMissionStatus(player, EMissionStatus.SUCCESS) / getTotalMissionStatus(player, EMissionStatus.FAILED))\r\n                            .toLocaleString(undefined, { maximumFractionDigits: 2 })}\r\n                    </p>\r\n                </div>\r\n            </Container>\r\n            {/*<div>\r\n                <p>\r\n                    {player?.infos.name} est mort {getTotalPlayerStatusWithMission(EPlayerStatus.DEAD, EMissionStatus.SUCCESS)} fois alors\r\n                    que la mission s&apos;est soldé par un succès,<br /> ce qui représente {((getTotalPlayerStatusWithMission(EPlayerStatus.DEAD, EMissionStatus.SUCCESS) / getTotalMissionStatus(EMissionStatus.SUCCESS)) * 100)\r\n                        .toLocaleString(undefined, { maximumFractionDigits: 0 })}% des ses missions accomplies !\r\n                </p>\r\n            </div>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerDetail;","import React from 'react';\r\nimport { VerticalBarSeries, XAxis, XYPlot, YAxis } from 'react-vis';\r\nimport styled from '@emotion/styled';\r\n\r\nimport urljoin from 'url-join';\r\n\r\nimport { url as urlAPI } from '../../config/gdcapi.json';\r\nimport IPlayerType from '../../models/IPlayerType';\r\nimport IStatType from '../../models/IStatType';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n`;\r\n\r\ninterface IPlayersType extends IPlayerType {\r\n    last_mission: string\r\n}\r\n\r\ninterface IBarStat extends IStatType {\r\n    x: string,\r\n    y: number\r\n}\r\n\r\nconst AllPlayers = (): JSX.Element => {\r\n    const [players, setPlayers] = React.useState<IPlayersType[]>()\r\n\r\n    React.useEffect((): void => {\r\n        (async () => {\r\n            setPlayers(await (await fetch(urljoin(urlAPI, '/players'))).json());\r\n        })();\r\n    }, []);\r\n\r\n    const getTop3Stats = (players: IPlayersType[] | undefined): IBarStat[] => {\r\n        if (players)\r\n            return players.sort((a, b) => b.count_missions - a.count_missions).slice(0, 3).map(p => ({\r\n                x: p.name,\r\n                y: p.count_missions,\r\n                style: {\r\n                    fill: undefined,\r\n                    strokeWidth: undefined\r\n                }\r\n            }));\r\n        return [];\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{players?.length} joueurs ont déjà effectué une mission</h2>\r\n            <Container>\r\n                <XYPlot\r\n                    xType={'ordinal'}\r\n                    animation={true}\r\n                    width={300}\r\n                    height={300}>\r\n                    <VerticalBarSeries\r\n                        barWidth={0.5}\r\n                        animation={true}\r\n                        data={getTop3Stats(players)}\r\n                        onSeriesMouseOver={ev => {\r\n                            console.log(ev);\r\n                        }} />\r\n                    <XAxis />\r\n                    <YAxis title=\"Nombre de missions\" />\r\n                </XYPlot>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AllPlayers;","import PlayerDetail from \"./Player\";\r\nimport AllPlayers from \"./Players\";\r\n\r\n\r\nexport const Player = PlayerDetail;\r\nexport const Players = AllPlayers;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { useParams } from 'react-router';\r\n\r\nimport urljoin from 'url-join';\r\n\r\nimport { Player, Players } from '../../features/players';\r\nimport { url as urlAPI } from '../../config/gdcapi.json';\r\n\r\nconst Search = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\ntype ParamsType = {\r\n    id: string\r\n}\r\n\r\nconst PlayersView = (): JSX.Element => {\r\n    const { id }: ParamsType = useParams();\r\n    const [playerID, setPlayerID] = React.useState(id ? parseInt(id) : 0);\r\n    const [playerName, setPlayerName] = React.useState(id && !parseInt(id) ? id : \"\");\r\n\r\n    const handleIdChange = (event: React.SyntheticEvent): void => {\r\n        if (event.target) {\r\n            setPlayerID(parseInt((event.target as HTMLInputElement).value));\r\n        }\r\n    }\r\n\r\n    const handleIdFetch = async (event: React.SyntheticEvent) => {\r\n        const name = (await (await fetch(urljoin(urlAPI, `/players/id/${parseInt((event.target as HTMLInputElement).value)}`))).json()).name;\r\n        setPlayerName(name === null ? 0 : name);\r\n    }\r\n\r\n    const handleNameChange = (event: React.SyntheticEvent): void => {\r\n        if (event.target) {\r\n            setPlayerName((event.target as HTMLInputElement).value);\r\n        }\r\n    }\r\n\r\n    const handleNameFetch = async (event: React.SyntheticEvent) => {\r\n        const id = (await (await fetch(urljoin(urlAPI, `/players/name/${(event.target as HTMLInputElement).value}`))).json()).id;\r\n        setPlayerID(id === null ? 0 : id);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Joueurs</h1>\r\n            <Search>\r\n                <label>ID du joueur\r\n                    <input type=\"number\" value={playerID} onChange={handleIdChange} onBlur={handleIdFetch} />\r\n                </label>\r\n                <label>Nom du joueur\r\n                    <input type=\"text\" value={playerName} onChange={handleNameChange} onBlur={handleNameFetch} />\r\n                </label>\r\n            </Search>\r\n            {\r\n                playerID ? <Player id={playerID} /> : <Players />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayersView;","import React from 'react';\r\n\r\nconst NotFound = (): JSX.Element => {\r\n    return (\r\n        <div>\r\n            <h1>404</h1>\r\n            <p>Page not found</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport styled from '@emotion/styled';\r\n\r\nimport Navbar from \"./features/commons/Navbar\";\r\n\r\nimport Home from \"./views/home\";\r\nimport Players from \"./views/players\";\r\n\r\nimport NotFound from \"./views/errors/NotFound\";\r\n\r\nconst AppContainer = styled.div`\r\n  margin-top: var(--nav-size);\r\n  text-align: center;\r\n  min-height: calc(100vh - var(--nav-size) - var(--footer-size) - 14px);\r\n`;\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Router basename='/'>\r\n      <Navbar />\r\n      <AppContainer>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path={[\"/players\", \"/players/:id\"]} component={Players} />\r\n          <Route exact path=\"/missions/:id\" component={Home} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </AppContainer>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n// TODO: npm run deploy"],"sourceRoot":""}