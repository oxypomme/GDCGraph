{"version":3,"sources":["models/EMissionStatus.ts","features/commons/Navbar.tsx","views/home/index.tsx","models/EPlayerStatus.ts","features/players/PieStyle.ts","features/players/Player.tsx","features/players/Players.tsx","features/players/index.tsx","views/players/index.tsx","views/errors/NotFound.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EMissionStatus","Nav","styled","nav","NavList","ul","NavItem","li","Navbar","id","exact","to","icon","faChartPie","faUsers","faGlobeEurope","Home","EPlayerStatus","PieStyle","colors","legend","position","pieSliceTextStyle","color","Container","div","PlayerDetail","props","React","useState","player","setPlayer","useEffect","a","pId","parseInt","fetch","urljoin","urlAPI","json","getTotalPlayerStatus","status","missions","filter","m","player_status","length","getTotalMissionStatus","mission_status","infos","name","count_missions","ALIVE","DEAD","toLocaleString","undefined","maximumFractionDigits","width","height","chartType","loader","data","alive","death","push","getDeathStats","options","SUCCESS","FAILED","win","loose","getLooseStats","AllPlayers","players","setPlayers","headers","sort","b","slice","map","p","getTop3Stats","isStacked","chart","title","vAxis","sumMiss","getAverage","Search","Component","playerID","playerText","setPlayerText","type","value","onChange","event","target","onBlur","Player","PlayersView","useParams","NotFound","AppContainer","App","basename","path","component","Players","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.316c456d.chunk.js","sourcesContent":["enum EMissionStatus {\r\n    UNKNOWN = 0,\r\n    SUCCESS,\r\n    FAILED\r\n}\r\n\r\nexport default EMissionStatus;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChartPie, faGlobeEurope, faUsers } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Nav = styled.nav`\r\n    height: var(--nav-size);\r\n    width: 100%;\r\n    position: fixed;\r\n    float: left;\r\n    top: 0;\r\n    z-index: 9999;\r\n`;\r\n\r\nconst NavList = styled.ul`\r\n    height: 100%;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    background-color: var(--background-dark);\r\n`;\r\n\r\nconst NavItem = styled.li`\r\n    height: 100%;\r\n    float: left;\r\n\r\n    & > a {\r\n        display: inline-block;\r\n        color: var(--text);\r\n        text-align: center;\r\n        padding: 14px 16px;\r\n        text-decoration: none;\r\n        height: 100%;\r\n    }\r\n\r\n    & > a:hover {\r\n        background-color: var(--background-light);\r\n    }\r\n\r\n    & > a.active {\r\n        background-color: var(--accent1);\r\n    }\r\n\r\n    & svg {\r\n        margin-right: 5px;\r\n    }\r\n`;\r\n\r\nconst Navbar = (): JSX.Element => {\r\n    return (\r\n        <Nav id=\"navbar\">\r\n            <NavList>\r\n                <NavItem><NavLink exact to=\"/\"><FontAwesomeIcon icon={faChartPie} />GDC Graph</NavLink></NavItem>\r\n                <NavItem><NavLink to=\"/players\"><FontAwesomeIcon icon={faUsers} />Joueurs</NavLink></NavItem>\r\n                <NavItem><NavLink exact to=\"/missions\"><FontAwesomeIcon icon={faGlobeEurope} />Missions</NavLink></NavItem>\r\n            </NavList>\r\n        </Nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Home = (): JSX.Element => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","enum EPlayerStatus {\r\n    UNKNOWN = 0,\r\n    ALIVE,\r\n    DEAD\r\n}\r\nexport default EPlayerStatus;","const PieStyle = {\r\n    colors: [\r\n        '#81d5ff',\r\n        '#ee9e9e',\r\n        '#fceb96'\r\n    ],\r\n    legend: {\r\n        position: 'bottom'\r\n    },\r\n    pieSliceTextStyle: {\r\n        color: 'black'\r\n    }\r\n}\r\n\r\nexport default PieStyle;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport { Chart } from \"react-google-charts\";\r\nimport urljoin from 'url-join';\r\n\r\nimport { url as urlAPI } from '../../config/gdcapi.json';\r\nimport EMissionStatus from '../../models/EMissionStatus';\r\nimport EPlayerStatus from '../../models/EPlayerStatus';\r\nimport MissionType from '../../models/MissionType';\r\nimport IPlayerType from '../../models/IPlayerType';\r\nimport PieStyle from './PieStyle';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-content: center;\r\n    justify-content: center;\r\n`;\r\n\r\ntype PropsType = {\r\n    id: string\r\n}\r\n\r\ntype PlayerDetailType = {\r\n    infos: IPlayerType,\r\n    missions: Array<MissionType>\r\n}\r\n\r\nconst PlayerDetail = (props: PropsType): JSX.Element => {\r\n    const { id } = props;\r\n    const [player, setPlayer] = React.useState<PlayerDetailType>();\r\n\r\n    React.useEffect((): void => {\r\n        (async () => {\r\n            let pId = id;\r\n            if (!parseInt(id)) {\r\n                pId = (await (await fetch(urljoin(urlAPI, `/players/name/${id}`))).json()).id;\r\n            }\r\n            setPlayer(await (await fetch(urljoin(urlAPI, `/players/${pId}`))).json());\r\n        })();\r\n    }, [id]);\r\n\r\n    const getTotalPlayerStatus = (status: EPlayerStatus): number => {\r\n        if (player) {\r\n            return player.missions.filter(m => m.player_status === status).length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const getTotalMissionStatus = (status: EMissionStatus): number => {\r\n        if (player) {\r\n            return player.missions.filter(m => m.mission_status === status).length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const getTotalPlayerStatusWithMission = (pStatus: EPlayerStatus, mStatus: EMissionStatus): number => {\r\n        if (player) {\r\n            return player.missions.filter(m => m.player_status === pStatus && m.mission_status === mStatus).length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const getDeathStats = (): unknown[] => {\r\n        const data: unknown[] = [[\"Status fin\", \"Nombre\"]];\r\n        if (player) {\r\n            const alive = getTotalPlayerStatus(EPlayerStatus.ALIVE);\r\n            const death = getTotalPlayerStatus(EPlayerStatus.DEAD);\r\n            if (alive) {\r\n                data.push(['Vivant', alive]);\r\n            }\r\n            if (death) {\r\n                data.push(['Mort', death]);\r\n            }\r\n            if (alive + death !== player.infos.count_missions) {\r\n                data.push(['Inconnu', player.infos.count_missions - (alive + death)]);\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    const getLooseStats = (): unknown[] => {\r\n        const data: unknown[] = [[\"Verdict\", \"Nombre\"]];\r\n        if (player) {\r\n            const win = getTotalMissionStatus(EMissionStatus.SUCCESS);\r\n            const loose = getTotalMissionStatus(EMissionStatus.FAILED);\r\n            if (win) {\r\n                data.push(['Succe', win]);\r\n            }\r\n            if (loose) {\r\n                data.push(['Echec', loose]);\r\n            }\r\n            if (win + loose !== player.infos.count_missions) {\r\n                data.push(['Inconnu', player.infos.count_missions - (win + loose)]);\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{player?.infos.name}</h2>\r\n            <p>{player?.infos.count_missions} missions au compteur</p>\r\n            <Container>\r\n                <div>\r\n                    <h3>Mort ou vif ?</h3>\r\n                    <p>\r\n                        Ratio : {(getTotalPlayerStatus(EPlayerStatus.ALIVE) / getTotalPlayerStatus(EPlayerStatus.DEAD))\r\n                            .toLocaleString(undefined, { maximumFractionDigits: 2 })}\r\n                    </p>\r\n                    <Chart\r\n                        width={'300px'}\r\n                        height={'auto'}\r\n                        chartType=\"PieChart\"\r\n                        loader={<div>Waiting Data</div>}\r\n                        data={getDeathStats()}\r\n                        options={{ ...PieStyle }}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h3>Victoire ?</h3>\r\n                    <p>\r\n                        Ratio : {(getTotalMissionStatus(EMissionStatus.SUCCESS) / getTotalMissionStatus(EMissionStatus.FAILED))\r\n                            .toLocaleString(undefined, { maximumFractionDigits: 2 })}\r\n                    </p>\r\n                    <Chart\r\n                        width={'300px'}\r\n                        height={'auto'}\r\n                        chartType=\"PieChart\"\r\n                        loader={<div>Waiting Data</div>}\r\n                        data={getLooseStats()}\r\n                        options={{ ...PieStyle }}\r\n                    />\r\n                </div>\r\n            </Container>\r\n            {/*<div>\r\n                <p>\r\n                    {player?.infos.name} est mort {getTotalPlayerStatusWithMission(EPlayerStatus.DEAD, EMissionStatus.SUCCESS)} fois alors\r\n                    que la mission s&apos;est soldé par un succès,<br /> ce qui représente {((getTotalPlayerStatusWithMission(EPlayerStatus.DEAD, EMissionStatus.SUCCESS) / getTotalMissionStatus(EMissionStatus.SUCCESS)) * 100)\r\n                        .toLocaleString(undefined, { maximumFractionDigits: 0 })}% des ses missions accomplies !\r\n                </p>\r\n            </div>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerDetail;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport { Chart } from \"react-google-charts\";\r\nimport urljoin from 'url-join';\r\n\r\nimport { url as urlAPI } from '../../config/gdcapi.json';\r\nimport IPlayerType from '../../models/IPlayerType';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n`;\r\n\r\ninterface IPlayersType extends IPlayerType {\r\n    last_mission: string\r\n}\r\n\r\nconst AllPlayers = (): JSX.Element => {\r\n    const [players, setPlayers] = React.useState<IPlayersType[]>()\r\n\r\n    React.useEffect((): void => {\r\n        (async () => {\r\n            setPlayers(await (await fetch(urljoin(urlAPI, '/players'))).json());\r\n        })();\r\n    }, []);\r\n\r\n    const getTop3Stats = (): unknown[] => {\r\n        const headers = ['Player', 'Count'];\r\n        if (players) {\r\n            return [headers, ...players.sort((a, b) => b.count_missions - a.count_missions).slice(0, 3).map(p => ([p.name, p.count_missions]))];\r\n        }\r\n        return [headers];\r\n    }\r\n\r\n    const getAverage = (): number => {\r\n        if (players) {\r\n            let sumMiss = 0;\r\n            for (const player of players) {\r\n                sumMiss += player.count_missions;\r\n            }\r\n            return sumMiss / players.length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{players?.length} joueurs ont étés trouvés</h2>\r\n            <Container>\r\n                <Chart\r\n                    width={'auto'}\r\n                    height={'auto'}\r\n                    chartType=\"ColumnChart\"\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={getTop3Stats()}\r\n                    options={{\r\n                        isStacked: true,\r\n                        chart: {\r\n                            title: '3 plus gros joueurs',\r\n                        },\r\n                        legend: 'none',\r\n                        vAxis: {\r\n                            title: \"Nombre de missions\",\r\n                        },\r\n                        colors: ['#ADEBAD']\r\n                    }}\r\n                />\r\n            </Container>\r\n            <p>Chaque joueur a joué {getAverage().toLocaleString(undefined, { maximumFractionDigits: 0 })} missions en moyenne</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AllPlayers;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport PlayerDetail from \"./Player\";\r\nimport AllPlayers from \"./Players\";\r\n\r\nconst Search = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\ntype PropsType = {\r\n    playerID: string\r\n}\r\n\r\nconst Component = (props: PropsType): JSX.Element => {\r\n    const { playerID } = props;\r\n\r\n    const [playerText, setPlayerText] = React.useState(playerID);\r\n    const [player, setPlayer] = React.useState(playerID);\r\n\r\n    const handleNameChange = (event: React.SyntheticEvent): void => {\r\n        setPlayerText((event.target as HTMLInputElement).value);\r\n    }\r\n\r\n    const handleNameBlur = (event: React.SyntheticEvent): void => {\r\n        setPlayer((event.target as HTMLInputElement).value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Search>\r\n                <label>Nom du joueur\r\n                    <input type=\"text\" value={playerText} onChange={handleNameChange} onBlur={handleNameBlur} />\r\n                </label>\r\n            </Search>\r\n            {\r\n                player ? <PlayerDetail id={player} /> : <AllPlayers />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Component;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { useParams } from 'react-router';\r\n\r\nimport Player from '../../features/players';\r\n\r\ntype ParamsType = {\r\n    id: string\r\n}\r\n\r\nconst PlayersView = (): JSX.Element => {\r\n    const { id }: ParamsType = useParams();\r\n\r\n    return (\r\n        <div>\r\n            <h1>Joueurs</h1>\r\n            <Player playerID={id} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayersView;","import React from 'react';\r\n\r\nconst NotFound = (): JSX.Element => {\r\n    return (\r\n        <div>\r\n            <h1>404</h1>\r\n            <p>Page not found</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport styled from '@emotion/styled';\r\n\r\nimport Navbar from \"./features/commons/Navbar\";\r\n\r\nimport Home from \"./views/home\";\r\nimport Players from \"./views/players\";\r\n\r\nimport NotFound from \"./views/errors/NotFound\";\r\n\r\nconst AppContainer = styled.div`\r\n  margin-top: var(--nav-size);\r\n  text-align: center;\r\n  min-height: calc(100vh - var(--nav-size) - var(--footer-size) - 14px);\r\n`;\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Router basename='/'>\r\n      <Navbar />\r\n      <AppContainer>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path={[\"/players\", \"/players/:id\"]} component={Players} />\r\n          <Route exact path=\"/missions/:id\" component={Home} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </AppContainer>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n// TODO: npm run deploy"],"sourceRoot":""}